#include<bits/stdc++.h>
using namespace std;
class Graph {
   int V; 
   vector<int> *adj;
public:
   Graph(int V);
   void addEdge(int v, int w);
   void SeqBFS(int s);
   void parallelBFS(int s);
     void SeqDFS(int s);
   void parallelDFS(int s);
};
Graph::Graph(int V) {
   this->V = V;
   adj = new vector<int>[V];
}
void Graph::addEdge(int v, int w) {
   adj[v].push_back(w);

   adj[w].push_back(v);

}
void Graph::SeqBFS(int s) {

   bool *visited = new bool[V];

   for (int i = 0; i < V; i++) {

       visited[i] = false;

   }

   queue<int> q;

   visited[s] = true;

   q.push(s);

   while (!q.empty()) {

       s = q.front();

       cout << s << " ";

       q.pop();

       for (auto i = adj[s].begin(); i != adj[s].end(); ++i) {

           if (!visited[*i]) {

               visited[*i] = true;

               q.push(*i);

           }

       }

   }

}

void Graph::parallelBFS(int s) {

   bool *visited = new bool[V];

   for (int i = 0; i < V; i++) {

       visited[i] = false;

   }

   queue<int> q;

   visited[s] = true;

   q.push(s);

   while (!q.empty()) {

       s = q.front();

       cout << s << " ";

       q.pop();

       #pragma omp parallel for

       for (auto i = adj[s].begin(); i != adj[s].end(); ++i) {

           if (!visited[*i]) {

               visited[*i] = true;

               q.push(*i);

           }

       }

   }

}
void Graph::SeqDFS(int s) {

   bool *visited = new bool[V];

   for (int i = 0; i < V; i++) {

       visited[i] = false;

   }

   stack<int> st;

   st.push(s);

   while (!st.empty()) {

       s = st.top();

       st.pop();

       if (!visited[s]) {

           cout << s << " ";

           visited[s] = true;

       }

       for (auto i = adj[s].begin(); i != adj[s].end(); ++i) {

           if (!visited[*i]) {

               st.push(*i);

           }

       }

   }

}

void Graph::parallelDFS(int s) {

   bool *visited = new bool[V];

   for (int i = 0; i < V; i++) {

       visited[i] = false;

   }

   stack<int> st;

   st.push(s);

   while (!st.empty()) {

       s = st.top();

       st.pop();

       if (!visited[s]) {

           cout << s << " ";

           visited[s] = true;

       }

       #pragma omp parallel for

       for (auto i = adj[s].begin(); i != adj[s].end(); ++i) {

           if (!visited[*i]) {

               st.push(*i);

           }

       }

   }

}

int main() {
    int num;
    
    cout<<"Enter number of Elements"<<endl;
    cin>>num;
    num=num+1;
      Graph g(4);
    for(int i=0;i<num;i++)
    {
        int j,k;
        cin>>j>>k;
        g.addEdge(j,k);
    }

 

  

   cout << "Parallel Depth First Traversal (starting from vertex 2):\n";
   auto start1 = chrono::steady_clock::now();
     g.SeqBFS(2);
    auto end1 = chrono::steady_clock::now();
    chrono::duration<double, micro> fp1 = end1 - start1;
    cout<<endl;
    cout << "Sequential DFS Time: " << fp1.count() << " microseconds" << endl;
   auto start3 = chrono::steady_clock::now();https:
     g.parallelBFS(2);
    auto end3 = chrono::steady_clock::now();
    chrono::duration<double, micro> fp3 = end3 - start3;
    cout<<endl;
    cout << "Parallel DFS Time: " << fp3.count() << " microseconds" << endl;

  

   cout << "\nParallel Breath First Traversal (starting from vertex 2):\n";
 auto start4 = chrono::steady_clock::now();
      g.SeqDFS(2);

    auto end4 = chrono::steady_clock::now();
    chrono::duration<double, micro> fp4 = end4- start4;
    cout<<endl;
    cout << "Sequential BFS Time: " << fp4.count() << " microseconds" << endl;
      cout << "\nParallel Breath First Traversal (starting from vertex 2):\n";
 auto start2 = chrono::steady_clock::now();
      g.parallelDFS(2);

    auto end2 = chrono::steady_clock::now();
    chrono::duration<double, micro> fp2 = end2- start2;
    cout<<endl;
    cout << "Parallel DFS Time: " << fp2.count() << " microseconds" << endl;
    // Calculate speedup for BFS
    double DFSSpeedup = fp1.count() / fp3.count();
    cout << "DFS Speedup : " << DFSSpeedup << endl;
    // Calculate speedup for DFS
    double BFSSpeedup = fp4.count() / fp2.count();
    cout << "BFS Speedup : " << BFSSpeedup << endl;

  
   return 0;

}





